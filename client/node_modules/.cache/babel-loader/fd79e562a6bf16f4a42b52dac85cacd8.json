{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:3001/auth/';\n\nconst register = (nickname, email, password) => {\n  return axios.post(API_URL + 'signup', {\n    nickname: nickname,\n    email: email,\n    password: password\n  }).then(function (response) {\n    console.log(response);\n\n    if (response.data.accessToken) {\n      const accessToken = response.data.accessToken;\n      console.log(`token: ${response.data.accessToken}`);\n      localStorage.setItem('accessToken', accessToken);\n      console.log(`token was saved!`);\n    } else {\n      throw Error('Unable to login. access token is needed!');\n    }\n  }).catch(function (error) {\n    console.log(error);\n  });\n};\n\nconst login = (email, password) => {\n  return axios.post(API_URL + 'login', {\n    email: email,\n    password: password\n  }).then(response => {\n    if (response.data.accessToken) {\n      console.log(`token: ${response.data.accessToken}`);\n      const accessToken = response.data.accessToken;\n      localStorage.setItem('accessToken', accessToken);\n    } else {\n      throw Error('Unable to login. access token is needed!');\n    }\n  });\n};\n\nconst chat = accesToken => {\n  return axios.get(API_URL + 'chat', {\n    headers: {\n      Authorization: ` ${accesToken}`\n    }\n  }).then(response => {\n    console.log(response);\n  });\n};\n\nconst logout = () => {\n  localStorage.removeItem('user');\n};\n\nconst getCurrentUser = () => {\n  return JSON.parse(localStorage.getItem('user'));\n};\n\nexport default {\n  register,\n  login,\n  logout,\n  chat,\n  getCurrentUser\n};","map":{"version":3,"sources":["/Users/omalka/Desktop/or/js_studies/chat-app/client/src/services/AuthService.js"],"names":["axios","API_URL","register","nickname","email","password","post","then","response","console","log","data","accessToken","localStorage","setItem","Error","catch","error","login","chat","accesToken","get","headers","Authorization","logout","removeItem","getCurrentUser","JSON","parse","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,6BAAhB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBC,QAAlB,KAA+B;AAC9C,SAAOL,KAAK,CACTM,IADI,CACCL,OAAO,GAAG,QADX,EACqB;AACxBE,IAAAA,QAAQ,EAAEA,QADc;AAExBC,IAAAA,KAAK,EAAEA,KAFiB;AAGxBC,IAAAA,QAAQ,EAAEA;AAHc,GADrB,EAMJE,IANI,CAMC,UAAUC,QAAV,EAAoB;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,QAAIA,QAAQ,CAACG,IAAT,CAAcC,WAAlB,EAA+B;AAC7B,YAAMA,WAAW,GAAGJ,QAAQ,CAACG,IAAT,CAAcC,WAAlC;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAa,UAASF,QAAQ,CAACG,IAAT,CAAcC,WAAY,EAAhD;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCF,WAApC;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAa,kBAAb;AACD,KALD,MAKO;AACL,YAAMK,KAAK,CAAC,0CAAD,CAAX;AACD;AACF,GAhBI,EAiBJC,KAjBI,CAiBE,UAAUC,KAAV,EAAiB;AACtBR,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACD,GAnBI,CAAP;AAoBD,CArBD;;AAuBA,MAAMC,KAAK,GAAG,CAACd,KAAD,EAAQC,QAAR,KAAqB;AACjC,SAAOL,KAAK,CACTM,IADI,CACCL,OAAO,GAAG,OADX,EACoB;AACvBG,IAAAA,KAAK,EAAEA,KADgB;AAEvBC,IAAAA,QAAQ,EAAEA;AAFa,GADpB,EAKJE,IALI,CAKEC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACG,IAAT,CAAcC,WAAlB,EAA+B;AAC7BH,MAAAA,OAAO,CAACC,GAAR,CAAa,UAASF,QAAQ,CAACG,IAAT,CAAcC,WAAY,EAAhD;AACA,YAAMA,WAAW,GAAGJ,QAAQ,CAACG,IAAT,CAAcC,WAAlC;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCF,WAApC;AACD,KAJD,MAIO;AACL,YAAMG,KAAK,CAAC,0CAAD,CAAX;AACD;AACF,GAbI,CAAP;AAcD,CAfD;;AAiBA,MAAMI,IAAI,GAAIC,UAAD,IAAgB;AAC3B,SAAOpB,KAAK,CACTqB,GADI,CACApB,OAAO,GAAG,MADV,EACkB;AACrBqB,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,IAAGH,UAAW;AADvB;AADY,GADlB,EAMJb,IANI,CAMEC,QAAD,IAAc;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,GARI,CAAP;AASD,CAVD;;AAYA,MAAMgB,MAAM,GAAG,MAAM;AACnBX,EAAAA,YAAY,CAACY,UAAb,CAAwB,MAAxB;AACD,CAFD;;AAIA,MAAMC,cAAc,GAAG,MAAM;AAC3B,SAAOC,IAAI,CAACC,KAAL,CAAWf,YAAY,CAACgB,OAAb,CAAqB,MAArB,CAAX,CAAP;AACD,CAFD;;AAIA,eAAe;AACb3B,EAAAA,QADa;AAEbgB,EAAAA,KAFa;AAGbM,EAAAA,MAHa;AAIbL,EAAAA,IAJa;AAKbO,EAAAA;AALa,CAAf","sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:3001/auth/';\n\nconst register = (nickname, email, password) => {\n  return axios\n    .post(API_URL + 'signup', {\n      nickname: nickname,\n      email: email,\n      password: password,\n    })\n    .then(function (response) {\n      console.log(response);\n      if (response.data.accessToken) {\n        const accessToken = response.data.accessToken;\n        console.log(`token: ${response.data.accessToken}`);\n        localStorage.setItem('accessToken', accessToken);\n        console.log(`token was saved!`);\n      } else {\n        throw Error('Unable to login. access token is needed!');\n      }\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n};\n\nconst login = (email, password) => {\n  return axios\n    .post(API_URL + 'login', {\n      email: email,\n      password: password,\n    })\n    .then((response) => {\n      if (response.data.accessToken) {\n        console.log(`token: ${response.data.accessToken}`);\n        const accessToken = response.data.accessToken;\n        localStorage.setItem('accessToken', accessToken);\n      } else {\n        throw Error('Unable to login. access token is needed!');\n      }\n    });\n};\n\nconst chat = (accesToken) => {\n  return axios\n    .get(API_URL + 'chat', {\n      headers: {\n        Authorization: ` ${accesToken}`,\n      },\n    })\n    .then((response) => {\n      console.log(response);\n    });\n};\n\nconst logout = () => {\n  localStorage.removeItem('user');\n};\n\nconst getCurrentUser = () => {\n  return JSON.parse(localStorage.getItem('user'));\n};\n\nexport default {\n  register,\n  login,\n  logout,\n  chat,\n  getCurrentUser,\n};\n"]},"metadata":{},"sourceType":"module"}